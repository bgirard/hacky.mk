diff --git a/config/rules.mk b/config/rules.mk
index 4bb66d1..4cebb27 100644
--- a/config/rules.mk
+++ b/config/rules.mk
@@ -870,20 +870,15 @@ $(PROGRAM): $(PROGOBJS) $(EXTRA_DEPS) $(EXE_DEF_FILE) $(RESFILE) $(GLOBAL_DEPS)
 	@$(RM) $@.manifest
 ifeq (_WINNT,$(GNU_CC)_$(OS_ARCH))
 	$(EXPAND_LD) -NOLOGO -OUT:$@ -PDB:$(LINK_PDBFILE) $(WIN32_EXE_LDFLAGS) $(LDFLAGS) $(MOZ_GLUE_PROGRAM_LDFLAGS) $(PROGOBJS) $(RESFILE) $(LIBS) $(EXTRA_LIBS) $(OS_LIBS)
-ifdef MSMANIFEST_TOOL
-	@if test -f $@.manifest; then \
-		if test -f "$(srcdir)/$@.manifest"; then \
-			echo "Embedding manifest from $(srcdir)/$@.manifest and $@.manifest"; \
-			mt.exe -NOLOGO -MANIFEST "$(win_srcdir)/$@.manifest" $@.manifest -OUTPUTRESOURCE:$@\;1; \
-		else \
-			echo "Embedding manifest from $@.manifest"; \
-			mt.exe -NOLOGO -MANIFEST $@.manifest -OUTPUTRESOURCE:$@\;1; \
-		fi; \
-	elif test -f "$(srcdir)/$@.manifest"; then \
-		echo "Embedding manifest from $(srcdir)/$@.manifest"; \
-		mt.exe -NOLOGO -MANIFEST "$(win_srcdir)/$@.manifest" -OUTPUTRESOURCE:$@\;1; \
-	fi
-endif	# MSVC with manifest tool
+	$(topsrcdir)/tools/handle-win32-manifest.sh "$(MSMANIFEST_TOOL)" "$@" "$@.manifest" "$(srcdir)/$@.manifest"
+	@$(PYTHON) $(topsrcdir)/tools/hackymake/makehacky.py \
+		"$(if $(TOP_DIST),$(TOP_DIST)/..,$(DEPTH))" \
+		"$(realpath .)" \
+		"$@" \
+		"$(subst ",^^,$(filter-out $@.manifest,$(PROGOBJS) $(EXTRA_DEPS) $(EXE_DEF_FILE) $(RESFILE)))" \
+		"$(subst ",^^,$(EXPAND_LD) -NOLOGO -OUT:$@ -PDB:$(LINK_PDBFILE) $(WIN32_EXE_LDFLAGS) $(LDFLAGS) $(MOZ_GLUE_PROGRAM_LDFLAGS) $(PROGOBJS) $(RESFILE) $(LIBS) $(EXTRA_LIBS) $(OS_LIBS) && $(topsrcdir)/tools/handle-win32-manifest.sh \"$(MSMANIFEST_TOOL)\" \"$@\" \"$@.manifest\" \"$(srcdir)/$@.manifest\")" \
+		"" \
+		"$(MDDEPDIR)/$(@F).pp"
 ifdef MOZ_PROFILE_GENERATE
 # touch it a few seconds into the future to work around FAT's
 # 2-second granularity
@@ -979,12 +974,26 @@ $(filter %.$(LIB_SUFFIX),$(LIBRARY)): $(OBJS) $(EXTRA_DEPS) $(GLOBAL_DEPS)
 	$(RM) $(LIBRARY)
 	$(EXPAND_AR) $(AR_FLAGS) $(OBJS) $(SHARED_LIBRARY_LIBS)
 	$(RANLIB) $@
+	@$(PYTHON) $(topsrcdir)/tools/hackymake/makehacky.py \
+		"$(if $(TOP_DIST),$(TOP_DIST)/..,$(DEPTH))" \
+		"$(realpath .)" \
+		"$@" \
+		"$(OBJS) $(EXTRA_DEPS)" \
+		"$(RM) $(LIBRARY) && $(EXPAND_AR) $(AR_FLAGS) $(OBJS) $(SHARED_LIBRARY_LIBS) && $(RANLIB) $@" \
+		""
 
 $(filter-out %.$(LIB_SUFFIX),$(LIBRARY)): $(filter %.$(LIB_SUFFIX),$(LIBRARY)) $(OBJS) $(EXTRA_DEPS) $(GLOBAL_DEPS)
 # When we only build a library descriptor, blow out any existing library
 	$(REPORT_BUILD)
 	$(if $(filter %.$(LIB_SUFFIX),$(LIBRARY)),,$(RM) $(REAL_LIBRARY) $(EXPORT_LIBRARY:%=%/$(REAL_LIBRARY)))
 	$(EXPAND_LIBS_GEN) -o $@ $(OBJS) $(SHARED_LIBRARY_LIBS)
+	@$(PYTHON) $(topsrcdir)/tools/hackymake/makehacky.py \
+		"$(if $(TOP_DIST),$(TOP_DIST)/..,$(DEPTH))" \
+		"$(realpath .)" \
+		"$@" \
+		"$(filter %.$(LIB_SUFFIX),$(LIBRARY)) $(OBJS) $(EXTRA_DEPS)" \
+		"$(if $(filter %.$(LIB_SUFFIX),$(LIBRARY)),true,$(RM) $(REAL_LIBRARY) $(EXPORT_LIBRARY:%=%/$(REAL_LIBRARY))) && $(EXPAND_LIBS_GEN) -o $@ $(OBJS) $(SHARED_LIBRARY_LIBS)" \
+		""
 
 ifeq ($(OS_ARCH),WINNT)
 # Import libraries are created by the rules creating shared libraries.
@@ -1046,14 +1055,22 @@ endif
 ifdef DTRACE_LIB_DEPENDENT
 ifndef XP_MACOSX
 	dtrace -G -C -s $(MOZILLA_DTRACE_SRC) -o  $(DTRACE_PROBE_OBJ) $(shell $(EXPAND_LIBS) $(MOZILLA_PROBE_LIBS))
-endif
 	$(EXPAND_MKSHLIB) $(SHLIB_LDSTARTFILE) $(OBJS) $(SUB_SHLOBJS) $(DTRACE_PROBE_OBJ) $(MOZILLA_PROBE_LIBS) $(RESFILE) $(LDFLAGS) $(WRAP_LDFLAGS) $(SHARED_LIBRARY_LIBS) $(EXTRA_DSO_LDOPTS) $(MOZ_GLUE_LDFLAGS) $(OS_LIBS) $(EXTRA_LIBS) $(DEF_FILE) $(SHLIB_LDENDFILE) $(if $(LIB_IS_C_ONLY),,$(STLPORT_LIBS))
-	@$(RM) $(DTRACE_PROBE_OBJ)
-else # ! DTRACE_LIB_DEPENDENT
+endif
+endif
 	$(EXPAND_MKSHLIB) $(SHLIB_LDSTARTFILE) $(OBJS) $(SUB_SHLOBJS) $(RESFILE) $(LDFLAGS) $(WRAP_LDFLAGS) $(SHARED_LIBRARY_LIBS) $(EXTRA_DSO_LDOPTS) $(MOZ_GLUE_LDFLAGS) $(OS_LIBS) $(EXTRA_LIBS) $(DEF_FILE) $(SHLIB_LDENDFILE) $(if $(LIB_IS_C_ONLY),,$(STLPORT_LIBS))
-endif # DTRACE_LIB_DEPENDENT
+ifdef DTRACE_LIB_DEPENDENT
+	@$(RM) $(DTRACE_PROBE_OBJ)
+endif
+	@$(PYTHON) $(topsrcdir)/tools/hackymake/makehacky.py \
+		"$(if $(TOP_DIST),$(TOP_DIST)/..,$(DEPTH))" \
+		"$(realpath .)" \
+		"$@" \
+		"$(subst ",^^,$(OBJS) $(DEF_FILE) $(LIBRARY) $(EXTRA_DEPS))" \
+		"$(subst ",^^,$(EXPAND_MKSHLIB) $(SHLIB_LDSTARTFILE) $(OBJS) $(SUB_SHLOBJS) $(RESFILE) $(LDFLAGS) $(WRAP_LDFLAGS) $(SHARED_LIBRARY_LIBS) $(EXTRA_DSO_LDOPTS) $(MOZ_GLUE_LDFLAGS) $(OS_LIBS) $(EXTRA_LIBS) $(DEF_FILE) $(SHLIB_LDENDFILE) $(if $(LIB_IS_C_ONLY),,$(STLPORT_LIBS)))" \
+		$(IMPORT_LIBRARY) \
+		"$(MDDEPDIR)/$(@F).pp"
 	@$(call CHECK_STDCXX,$@)
-
 ifeq (_WINNT,$(GNU_CC)_$(OS_ARCH))
 ifdef MSMANIFEST_TOOL
 ifdef EMBED_MANIFEST_AT
@@ -1132,6 +1149,16 @@ $(COBJS):
 	$(REPORT_BUILD)
 	@$(MAKE_DEPS_AUTO_CC)
 	$(ELOG) $(CC) $(OUTOPTION)$@ -c $(COMPILE_CFLAGS) $(TARGET_LOCAL_INCLUDES) $(_VPATH_SRCS)
+	@$(PYTHON) $(topsrcdir)/tools/hackymake/makehacky.py cc \
+		"$(if $(TOP_DIST),$(TOP_DIST)/..,$(DEPTH))" \
+		"$(realpath .)" \
+		"$@" \
+		"$(_VPATH_SRCS)" \
+		"$(CC)" \
+		"$(OUTOPTION)" \
+		"$(subst ",^^,$(COMPILE_CFLAGS))" \
+		"$(subst ",^^,$(TARGET_LOCAL_INCLUDES))" \
+		"$(MDDEPDIR)/$(@F).pp"
 
 # DEFINES and ACDEFINES are needed here to enable conditional compilation of Q_OBJECTs:
 # 'moc' only knows about #defines it gets on the command line (-D...), not in
@@ -1164,16 +1191,46 @@ $(CPPOBJS):
 	$(REPORT_BUILD)
 	@$(MAKE_DEPS_AUTO_CXX)
 	$(ELOG) $(CCC) $(OUTOPTION)$@ -c $(COMPILE_CXXFLAGS) $(TARGET_LOCAL_INCLUDES) $(_VPATH_SRCS)
+	@$(PYTHON) $(topsrcdir)/tools/hackymake/makehacky.py cc \
+		"$(if $(TOP_DIST),$(TOP_DIST)/..,$(DEPTH))" \
+		"$(realpath .)" \
+		"$@" \
+		"$(_VPATH_SRCS)" \
+		"$(CCC)" \
+		"$(OUTOPTION)" \
+		"$(subst ",^^,$(COMPILE_CXXFLAGS))" \
+		"$(subst ",^^,$(TARGET_LOCAL_INCLUDES))" \
+		"$(MDDEPDIR)/$(@F).pp"
 
 $(CMMOBJS):
 	$(REPORT_BUILD)
 	@$(MAKE_DEPS_AUTO_CXX)
 	$(ELOG) $(CCC) -o $@ -c $(COMPILE_CXXFLAGS) $(COMPILE_CMMFLAGS) $(TARGET_LOCAL_INCLUDES) $(_VPATH_SRCS)
+	@$(PYTHON) $(topsrcdir)/tools/hackymake/makehacky.py cc \
+		"$(if $(TOP_DIST),$(TOP_DIST)/..,$(DEPTH))" \
+		"$(realpath .)" \
+		"$@" \
+		"$(_VPATH_SRCS)" \
+		"$(CCC)" \
+		"$(OUTOPTION)" \
+		"$(subst ",^^,$(COMPILE_CXXFLAGS) $(COMPILE_CMMFLAGS))" \
+		"$(subst ",^^,$(TARGET_LOCAL_INCLUDES))" \
+		"$(MDDEPDIR)/$(@F).pp"
 
 $(CMOBJS):
 	$(REPORT_BUILD)
 	@$(MAKE_DEPS_AUTO_CC)
 	$(ELOG) $(CC) -o $@ -c $(COMPILE_CFLAGS) $(COMPILE_CMFLAGS) $(TARGET_LOCAL_INCLUDES) $(_VPATH_SRCS)
+	@$(PYTHON) $(topsrcdir)/tools/hackymake/makehacky.py cc \
+		"$(if $(TOP_DIST),$(TOP_DIST)/..,$(DEPTH))" \
+		"$(realpath .)" \
+		"$@" \
+		"$(_VPATH_SRCS)" \
+		"$(CCC)" \
+		"$(OUTOPTION)" \
+		"$(subst ",^^,$(COMPILE_CFLAGS) $(COMPILE_CMFLAGS))" \
+		"$(subst ",^^,$(TARGET_LOCAL_INCLUDES))" \
+		"$(MDDEPDIR)/$(@F).pp"
 
 %.s: %.cpp $(call mkdir_deps,$(MDDEPDIR))
 	$(REPORT_BUILD)
@@ -1692,14 +1749,15 @@ $(or $(3),libs):: $(2)/$(notdir $(1))
 $(call install_cmd_override,$(2)/$(notdir $(1)))
 $(2)/$(notdir $(1)): $(1)
 	$$(call install_cmd,$(4) "$$<" "$${@D}")
+	$(PYTHON) $(topsrcdir)/tools/hackymake/makehacky.py install "$(if $(TOP_DIST),$(TOP_DIST)/..,$(DEPTH))" "$(category)" "$$<" "$${@D}"
 endef
 $(foreach category,$(INSTALL_TARGETS),\
   $(if $($(category)_DEST),,$(error Missing $(category)_DEST))\
   $(foreach file,$($(category)_FILES),\
-    $(eval $(call install_file_template,$(file),$($(category)_DEST),$($(category)_TARGET),$(IFLAGS1)))\
+    $(eval $(call install_file_template,$(file),$($(category)_DEST),$($(category)_TARGET),$(IFLAGS1),$(category)))\
   )\
   $(foreach file,$($(category)_EXECUTABLES),\
-    $(eval $(call install_file_template,$(file),$($(category)_DEST),$($(category)_TARGET),$(IFLAGS2)))\
+    $(eval $(call install_file_template,$(file),$($(category)_DEST),$($(category)_TARGET),$(IFLAGS2),$(category)))\
   )\
 )
 
