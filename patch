X-Git-Commit-ID: b8a74fabb8acad28b7dbbc2cb4247780c7cb8c0f
From: Ehsan Akhgari <ehsan@mozilla.com>
Subject: hacky.mk



diff --git a/client.mk b/client.mk
index 95a0e25137829b9c1026558092a3f43c36f6a65a..13d74fcdf4b45ada3331b249ebabd19a83d77abb 100644
--- a/client.mk
+++ b/client.mk
@@ -307,20 +307,25 @@ ifeq ($(TOPSRCDIR),$(OBJDIR))
 else
   CONFIGURE = $(TOPSRCDIR)/configure
 endif
 
 check-clobber:
 	$(PYTHON) $(TOPSRCDIR)/config/pythonpath.py -I $(TOPSRCDIR)/testing/mozbase/mozfile \
 	    $(TOPSRCDIR)/python/mozbuild/mozbuild/controller/clobber.py $(TOPSRCDIR) $(OBJDIR)
 
+hacky.mk: $(TOPSRCDIR)/tools/hackymake/hacky.mk
+	$(MKDIR) $(OBJDIR)/.hacky
+	cp $(TOPSRCDIR)/tools/hackymake/hacky.mk $(OBJDIR)/hacky.mk
+
 configure-files: $(CONFIGURES)
 
 configure-preqs = \
   check-clobber \
+  hacky.mk \
   configure-files \
   $(call mkdir_deps,$(OBJDIR)) \
   $(if $(MOZ_BUILD_PROJECTS),$(call mkdir_deps,$(MOZ_OBJDIR))) \
   save-mozconfig \
   $(NULL)
 
 save-mozconfig: $(FOUND_MOZCONFIG)
 	-cp $(FOUND_MOZCONFIG) $(OBJDIR)/.mozconfig
diff --git a/config/rules.mk b/config/rules.mk
index 0a2cfe017d7815bf4bfa7ad19721c5b341c50d81..62ab5ee4685943ba60b91ddbda620b6016fda997 100644
--- a/config/rules.mk
+++ b/config/rules.mk
@@ -969,21 +969,27 @@ ifdef DTRACE_PROBE_OBJ
 EXTRA_DEPS += $(DTRACE_PROBE_OBJ)
 OBJS += $(DTRACE_PROBE_OBJ)
 endif
 
 $(filter %.$(LIB_SUFFIX),$(LIBRARY)): $(OBJS) $(LOBJS) $(EXTRA_DEPS) $(GLOBAL_DEPS)
 	$(RM) $(LIBRARY)
 	$(EXPAND_AR) $(AR_FLAGS) $(OBJS) $(LOBJS) $(SHARED_LIBRARY_LIBS)
 	$(RANLIB) $@
+	echo -e "$(realpath .)/$(notdir $@): $(realpath $(OBJS)) $(realpath $(LOBJS)) $(EXTRA_DEPS) $(realpath .)/Makefile" > $(DEPTH)/.hacky/$(notdir $@).hacky
+	echo -e "\tcd $(realpath .) && $(RM) $(LIBRARY) && $(EXPAND_AR) $(AR_FLAGS) $(OBJS) $(LOBJS) $(SHARED_LIBRARY_LIBS) && $(RANLIB) $@" >> $(DEPTH)/.hacky/$(notdir $@).hacky
+	echo -e "all: $(realpath .)/$(notdir $@)\n" >> $(DEPTH)/.hacky/$(notdir $@).hacky
 
 $(filter-out %.$(LIB_SUFFIX),$(LIBRARY)): $(filter %.$(LIB_SUFFIX),$(LIBRARY)) $(OBJS) $(LOBJS) $(EXTRA_DEPS) $(GLOBAL_DEPS)
 # When we only build a library descriptor, blow out any existing library
 	$(if $(filter %.$(LIB_SUFFIX),$(LIBRARY)),,$(RM) $(REAL_LIBRARY) $(EXPORT_LIBRARY:%=%/$(REAL_LIBRARY)))
 	$(EXPAND_LIBS_GEN) -o $@ $(OBJS) $(LOBJS) $(SHARED_LIBRARY_LIBS)
+	echo -e "$(realpath .)/$(notdir $@): $(realpath $(filter %.$(LIB_SUFFIX),$(LIBRARY)) $(realpath $(OBJS)) $(realpath $(LOBJS)) $(EXTRA_DEPS)) $(realpath .)/Makefile" > $(DEPTH)/.hacky/$(notdir $@).hacky
+	echo -e "\tcd $(realpath .) && $(if $(filter %.$(LIB_SUFFIX),$(LIBRARY)),,$(RM) $(REAL_LIBRARY) $(EXPORT_LIBRARY:%=%/$(REAL_LIBRARY))) && $(EXPAND_LIBS_GEN) -o $@ $(OBJS) $(LOBJS) $(SHARED_LIBRARY_LIBS) $@" >> $(DEPTH)/.hacky/$(notdir $@).hacky
+	echo -e "all: $(realpath .)/$(notdir $@)\n" >> $(DEPTH)/.hacky/$(notdir $@).hacky
 
 ifeq ($(OS_ARCH),WINNT)
 # Import libraries are created by the rules creating shared libraries.
 # The rules to copy them to $(DIST)/lib depend on $(IMPORT_LIBRARY),
 # but make will happily consider the import library before it is refreshed
 # when rebuilding the corresponding shared library. Defining an empty recipe
 # for import libraries forces make to wait for the shared library recipe to
 # have run before considering other targets that depend on the import library.
@@ -1027,28 +1033,33 @@ endif
 
 # On Darwin (Mac OS X), dwarf2 debugging uses debug info left in .o files,
 # so instead of deleting .o files after repacking them into a dylib, we make
 # symlinks back to the originals. The symlinks are a no-op for stabs debugging,
 # so no need to conditionalize on OS version or debugging format.
 
 $(SHARED_LIBRARY): $(OBJS) $(LOBJS) $(DEF_FILE) $(RESFILE) $(LIBRARY) $(EXTRA_DEPS) $(GLOBAL_DEPS)
 	$(info $(notdir $@))
+	echo -e "$(realpath .)/$(notdir $@): $(realpath $(OBJS)) $(realpath $(LOBJS)) $(DEF_FILE) $(LIBRARY) $(EXTRA_DEPS) $(realpath .)/Makefile" > $(DEPTH)/.hacky/$(notdir $@).hacky
 ifndef INCREMENTAL_LINKER
 	$(RM) $@
+	echo -e "\tcd $(realpath .) && $(RM) $@" >> $(DEPTH)/.hacky/$(notdir $@).hacky
 endif
 ifdef DTRACE_LIB_DEPENDENT
 ifndef XP_MACOSX
 	dtrace -G -C -s $(MOZILLA_DTRACE_SRC) -o  $(DTRACE_PROBE_OBJ) $(shell $(EXPAND_LIBS) $(MOZILLA_PROBE_LIBS))
 endif
 	$(EXPAND_MKSHLIB) $(SHLIB_LDSTARTFILE) $(OBJS) $(LOBJS) $(SUB_SHLOBJS) $(DTRACE_PROBE_OBJ) $(MOZILLA_PROBE_LIBS) $(RESFILE) $(LDFLAGS) $(WRAP_LDFLAGS) $(SHARED_LIBRARY_LIBS) $(EXTRA_DSO_LDOPTS) $(MOZ_GLUE_LDFLAGS) $(OS_LIBS) $(EXTRA_LIBS) $(DEF_FILE) $(SHLIB_LDENDFILE) $(if $(LIB_IS_C_ONLY),,$(STLPORT_LIBS))
 	@$(RM) $(DTRACE_PROBE_OBJ)
 else # ! DTRACE_LIB_DEPENDENT
 	$(EXPAND_MKSHLIB) $(SHLIB_LDSTARTFILE) $(OBJS) $(LOBJS) $(SUB_SHLOBJS) $(RESFILE) $(LDFLAGS) $(WRAP_LDFLAGS) $(SHARED_LIBRARY_LIBS) $(EXTRA_DSO_LDOPTS) $(MOZ_GLUE_LDFLAGS) $(OS_LIBS) $(EXTRA_LIBS) $(DEF_FILE) $(SHLIB_LDENDFILE) $(if $(LIB_IS_C_ONLY),,$(STLPORT_LIBS))
+	echo -e "\tcd $(realpath .) && $(subst ",\",$(EXPAND_MKSHLIB)) $(subst ",\",$(SHLIB_LDSTARTFILE)) $(subst ",\",$(OBJS)) $(subst ",\",$(LOBJS)) $(subst ",\",$(SUB_SHLOBJS)) $(subst ",\",$(RESFILE)) $(subst ",\",$(LDFLAGS)) $(subst ",\",$(WRAP_LDFLAGS)) $(subst ",\",$(SHARED_LIBRARY_LIBS)) $(subst ",\",$(EXTRA_DSO_LDOPTS)) $(subst ",\",$(MOZ_GLUE_LDFLAGS)) $(subst ",\",$(OS_LIBS)) $(subst ",\",$(EXTRA_LIBS)) $(subst ",\",$(DEF_FILE)) $(subst ",\",$(SHLIB_LDENDFILE))\n" >> $(DEPTH)/.hacky/$(notdir $@).hacky
+	$(topsrcdir)/tools/hackymake/abspp.py < $(MDDEPDIR)/$(@F).pp >> $(DEPTH)/.hacky/$(notdir $@).hacky
 endif # DTRACE_LIB_DEPENDENT
+	echo -e "\nall: $(realpath .)/$(notdir $@)\n" >> $(DEPTH)/.hacky/$(notdir $@).hacky
 	@$(call CHECK_STDCXX,$@)
 
 ifeq (_WINNT,$(GNU_CC)_$(OS_ARCH))
 ifdef MSMANIFEST_TOOL
 ifdef EMBED_MANIFEST_AT
 	@if test -f $@.manifest; then \
 		mt.exe -NOLOGO -MANIFEST $@.manifest -OUTPUTRESOURCE:$@\;$(EMBED_MANIFEST_AT); \
 		rm -f $@.manifest; \
@@ -1139,21 +1150,29 @@ $(SOBJS): %.$(OBJ_SUFFIX): %.S
 
 #
 # Please keep the next two rules in sync.
 #
 $(CCOBJS): %.$(OBJ_SUFFIX): %.cc $(call mkdir_deps,$(MDDEPDIR))
 	$(REPORT_BUILD)
 	@$(MAKE_DEPS_AUTO_CXX)
 	$(ELOG) $(CCC) $(OUTOPTION)$@ -c $(COMPILE_CXXFLAGS) $(TARGET_LOCAL_INCLUDES) $(_VPATH_SRCS)
+	echo -e "$(realpath .)/$(notdir $@): $(realpath $(_VPATH_SRCS)) $(realpath .)/Makefile" > $(DEPTH)/.hacky/$(notdir $@).hacky
+	echo -e "\tcd $(realpath .) && $(CCC) $(subst ",\",$(OUTOPTION))$@ -c $(subst ",\",$(COMPILE_CXXFLAGS)) $(subst ",\",$(TARGET_LOCAL_INCLUDES)) $(subst ",\",$(_VPATH_SRCS))\n" >> $(DEPTH)/.hacky/$(notdir $@).hacky
+	echo -e "all: $(realpath .)/$(notdir $@)\n" >> $(DEPTH)/.hacky/$(notdir $@).hacky
+	$(topsrcdir)/tools/hackymake/abspp.py < $(MDDEPDIR)/$(@F).pp >> $(DEPTH)/.hacky/$(notdir $@).hacky
 
 $(CPPOBJS): %.$(OBJ_SUFFIX): %.cpp $(call mkdir_deps,$(MDDEPDIR))
 	$(REPORT_BUILD)
 	@$(MAKE_DEPS_AUTO_CXX)
-	$(ELOG) $(CCC) $(OUTOPTION)$@ -c $(COMPILE_CXXFLAGS) $(TARGET_LOCAL_INCLUDES) $(_VPATH_SRCS)
+	$(ELOG) $(CCC) $(OUTOPTION)$@ -c $(COMPILE_CXXFLAGS) $(TARGET_LOCAL_INCLUDES) $(_VPATH_SRCS) 
+	echo -e "$(realpath .)/$(notdir $@): $(realpath $(_VPATH_SRCS)) $(realpath .)/Makefile" > $(DEPTH)/.hacky/$(notdir $@).hacky
+	echo -e "\tcd $(realpath .) && $(CCC) $(OUTOPTION)$@ -c $(subst ",\",$(COMPILE_CXXFLAGS)) $(subst ",\",$(TARGET_LOCAL_INCLUDES)) $(subst ",\",$(_VPATH_SRCS))\n" >> $(DEPTH)/.hacky/$(notdir $@).hacky
+	echo -e "all: $(realpath .)/$(notdir $@)\n" >> $(DEPTH)/.hacky/$(notdir $@).hacky
+	$(topsrcdir)/tools/hackymake/abspp.py < $(MDDEPDIR)/$(@F).pp >> $(DEPTH)/.hacky/$(notdir $@).hacky
 
 $(CMMOBJS): $(OBJ_PREFIX)%.$(OBJ_SUFFIX): %.mm $(call mkdir_deps,$(MDDEPDIR))
 	$(REPORT_BUILD)
 	@$(MAKE_DEPS_AUTO_CXX)
 	$(ELOG) $(CCC) -o $@ -c $(COMPILE_CXXFLAGS) $(COMPILE_CMMFLAGS) $(TARGET_LOCAL_INCLUDES) $(_VPATH_SRCS)
 
 $(CMOBJS): $(OBJ_PREFIX)%.$(OBJ_SUFFIX): %.m $(call mkdir_deps,$(MDDEPDIR))
 	$(REPORT_BUILD)
diff --git a/js/src/Makefile.in b/js/src/Makefile.in
index e0a96e4afd5331474ae83dd5115dee8703bfa141..342b28b1e99d3bb1b6481debad4ba06dee9998c1 100644
--- a/js/src/Makefile.in
+++ b/js/src/Makefile.in
@@ -14,16 +14,22 @@ run_for_side_effects := $(shell echo "MAKE: $(MAKE)")
 include $(DEPTH)/config/autoconf.mk
 
 ifdef JS_STANDALONE
 LIBRARY_NAME	= mozjs-@MOZJS_MAJOR_VERSION@.@MOZJS_MINOR_VERSION@@MOZJS_ALPHA@
 else
 LIBRARY_NAME	= mozjs
 endif
 
+default:: hacky.mk
+
+hacky.mk: $(topsrcdir)/tools/hackymake/hacky.mk
+	mkdir .hacky
+	cp $(topsrcdir)/tools/hackymake/hacky.mk hacky.mk
+
 STATIC_LIBRARY_NAME = js_static
 MSVC_ENABLE_PGO := 1
 LIBS		= $(NSPR_LIBS)
 
 # JavaScript must be built shared, even for static builds, as it is used by
 # other modules which are always built shared. Failure to do so results in
 # the js code getting copied into xpinstall and jsd as well as mozilla-bin,
 # and then the static data cells used for locking no longer work.
diff --git a/js/src/config/rules.mk b/js/src/config/rules.mk
index 0a2cfe017d7815bf4bfa7ad19721c5b341c50d81..62ab5ee4685943ba60b91ddbda620b6016fda997 100644
--- a/js/src/config/rules.mk
+++ b/js/src/config/rules.mk
@@ -969,21 +969,27 @@ ifdef DTRACE_PROBE_OBJ
 EXTRA_DEPS += $(DTRACE_PROBE_OBJ)
 OBJS += $(DTRACE_PROBE_OBJ)
 endif
 
 $(filter %.$(LIB_SUFFIX),$(LIBRARY)): $(OBJS) $(LOBJS) $(EXTRA_DEPS) $(GLOBAL_DEPS)
 	$(RM) $(LIBRARY)
 	$(EXPAND_AR) $(AR_FLAGS) $(OBJS) $(LOBJS) $(SHARED_LIBRARY_LIBS)
 	$(RANLIB) $@
+	echo -e "$(realpath .)/$(notdir $@): $(realpath $(OBJS)) $(realpath $(LOBJS)) $(EXTRA_DEPS) $(realpath .)/Makefile" > $(DEPTH)/.hacky/$(notdir $@).hacky
+	echo -e "\tcd $(realpath .) && $(RM) $(LIBRARY) && $(EXPAND_AR) $(AR_FLAGS) $(OBJS) $(LOBJS) $(SHARED_LIBRARY_LIBS) && $(RANLIB) $@" >> $(DEPTH)/.hacky/$(notdir $@).hacky
+	echo -e "all: $(realpath .)/$(notdir $@)\n" >> $(DEPTH)/.hacky/$(notdir $@).hacky
 
 $(filter-out %.$(LIB_SUFFIX),$(LIBRARY)): $(filter %.$(LIB_SUFFIX),$(LIBRARY)) $(OBJS) $(LOBJS) $(EXTRA_DEPS) $(GLOBAL_DEPS)
 # When we only build a library descriptor, blow out any existing library
 	$(if $(filter %.$(LIB_SUFFIX),$(LIBRARY)),,$(RM) $(REAL_LIBRARY) $(EXPORT_LIBRARY:%=%/$(REAL_LIBRARY)))
 	$(EXPAND_LIBS_GEN) -o $@ $(OBJS) $(LOBJS) $(SHARED_LIBRARY_LIBS)
+	echo -e "$(realpath .)/$(notdir $@): $(realpath $(filter %.$(LIB_SUFFIX),$(LIBRARY)) $(realpath $(OBJS)) $(realpath $(LOBJS)) $(EXTRA_DEPS)) $(realpath .)/Makefile" > $(DEPTH)/.hacky/$(notdir $@).hacky
+	echo -e "\tcd $(realpath .) && $(if $(filter %.$(LIB_SUFFIX),$(LIBRARY)),,$(RM) $(REAL_LIBRARY) $(EXPORT_LIBRARY:%=%/$(REAL_LIBRARY))) && $(EXPAND_LIBS_GEN) -o $@ $(OBJS) $(LOBJS) $(SHARED_LIBRARY_LIBS) $@" >> $(DEPTH)/.hacky/$(notdir $@).hacky
+	echo -e "all: $(realpath .)/$(notdir $@)\n" >> $(DEPTH)/.hacky/$(notdir $@).hacky
 
 ifeq ($(OS_ARCH),WINNT)
 # Import libraries are created by the rules creating shared libraries.
 # The rules to copy them to $(DIST)/lib depend on $(IMPORT_LIBRARY),
 # but make will happily consider the import library before it is refreshed
 # when rebuilding the corresponding shared library. Defining an empty recipe
 # for import libraries forces make to wait for the shared library recipe to
 # have run before considering other targets that depend on the import library.
@@ -1027,28 +1033,33 @@ endif
 
 # On Darwin (Mac OS X), dwarf2 debugging uses debug info left in .o files,
 # so instead of deleting .o files after repacking them into a dylib, we make
 # symlinks back to the originals. The symlinks are a no-op for stabs debugging,
 # so no need to conditionalize on OS version or debugging format.
 
 $(SHARED_LIBRARY): $(OBJS) $(LOBJS) $(DEF_FILE) $(RESFILE) $(LIBRARY) $(EXTRA_DEPS) $(GLOBAL_DEPS)
 	$(info $(notdir $@))
+	echo -e "$(realpath .)/$(notdir $@): $(realpath $(OBJS)) $(realpath $(LOBJS)) $(DEF_FILE) $(LIBRARY) $(EXTRA_DEPS) $(realpath .)/Makefile" > $(DEPTH)/.hacky/$(notdir $@).hacky
 ifndef INCREMENTAL_LINKER
 	$(RM) $@
+	echo -e "\tcd $(realpath .) && $(RM) $@" >> $(DEPTH)/.hacky/$(notdir $@).hacky
 endif
 ifdef DTRACE_LIB_DEPENDENT
 ifndef XP_MACOSX
 	dtrace -G -C -s $(MOZILLA_DTRACE_SRC) -o  $(DTRACE_PROBE_OBJ) $(shell $(EXPAND_LIBS) $(MOZILLA_PROBE_LIBS))
 endif
 	$(EXPAND_MKSHLIB) $(SHLIB_LDSTARTFILE) $(OBJS) $(LOBJS) $(SUB_SHLOBJS) $(DTRACE_PROBE_OBJ) $(MOZILLA_PROBE_LIBS) $(RESFILE) $(LDFLAGS) $(WRAP_LDFLAGS) $(SHARED_LIBRARY_LIBS) $(EXTRA_DSO_LDOPTS) $(MOZ_GLUE_LDFLAGS) $(OS_LIBS) $(EXTRA_LIBS) $(DEF_FILE) $(SHLIB_LDENDFILE) $(if $(LIB_IS_C_ONLY),,$(STLPORT_LIBS))
 	@$(RM) $(DTRACE_PROBE_OBJ)
 else # ! DTRACE_LIB_DEPENDENT
 	$(EXPAND_MKSHLIB) $(SHLIB_LDSTARTFILE) $(OBJS) $(LOBJS) $(SUB_SHLOBJS) $(RESFILE) $(LDFLAGS) $(WRAP_LDFLAGS) $(SHARED_LIBRARY_LIBS) $(EXTRA_DSO_LDOPTS) $(MOZ_GLUE_LDFLAGS) $(OS_LIBS) $(EXTRA_LIBS) $(DEF_FILE) $(SHLIB_LDENDFILE) $(if $(LIB_IS_C_ONLY),,$(STLPORT_LIBS))
+	echo -e "\tcd $(realpath .) && $(subst ",\",$(EXPAND_MKSHLIB)) $(subst ",\",$(SHLIB_LDSTARTFILE)) $(subst ",\",$(OBJS)) $(subst ",\",$(LOBJS)) $(subst ",\",$(SUB_SHLOBJS)) $(subst ",\",$(RESFILE)) $(subst ",\",$(LDFLAGS)) $(subst ",\",$(WRAP_LDFLAGS)) $(subst ",\",$(SHARED_LIBRARY_LIBS)) $(subst ",\",$(EXTRA_DSO_LDOPTS)) $(subst ",\",$(MOZ_GLUE_LDFLAGS)) $(subst ",\",$(OS_LIBS)) $(subst ",\",$(EXTRA_LIBS)) $(subst ",\",$(DEF_FILE)) $(subst ",\",$(SHLIB_LDENDFILE))\n" >> $(DEPTH)/.hacky/$(notdir $@).hacky
+	$(topsrcdir)/tools/hackymake/abspp.py < $(MDDEPDIR)/$(@F).pp >> $(DEPTH)/.hacky/$(notdir $@).hacky
 endif # DTRACE_LIB_DEPENDENT
+	echo -e "\nall: $(realpath .)/$(notdir $@)\n" >> $(DEPTH)/.hacky/$(notdir $@).hacky
 	@$(call CHECK_STDCXX,$@)
 
 ifeq (_WINNT,$(GNU_CC)_$(OS_ARCH))
 ifdef MSMANIFEST_TOOL
 ifdef EMBED_MANIFEST_AT
 	@if test -f $@.manifest; then \
 		mt.exe -NOLOGO -MANIFEST $@.manifest -OUTPUTRESOURCE:$@\;$(EMBED_MANIFEST_AT); \
 		rm -f $@.manifest; \
@@ -1139,21 +1150,29 @@ $(SOBJS): %.$(OBJ_SUFFIX): %.S
 
 #
 # Please keep the next two rules in sync.
 #
 $(CCOBJS): %.$(OBJ_SUFFIX): %.cc $(call mkdir_deps,$(MDDEPDIR))
 	$(REPORT_BUILD)
 	@$(MAKE_DEPS_AUTO_CXX)
 	$(ELOG) $(CCC) $(OUTOPTION)$@ -c $(COMPILE_CXXFLAGS) $(TARGET_LOCAL_INCLUDES) $(_VPATH_SRCS)
+	echo -e "$(realpath .)/$(notdir $@): $(realpath $(_VPATH_SRCS)) $(realpath .)/Makefile" > $(DEPTH)/.hacky/$(notdir $@).hacky
+	echo -e "\tcd $(realpath .) && $(CCC) $(subst ",\",$(OUTOPTION))$@ -c $(subst ",\",$(COMPILE_CXXFLAGS)) $(subst ",\",$(TARGET_LOCAL_INCLUDES)) $(subst ",\",$(_VPATH_SRCS))\n" >> $(DEPTH)/.hacky/$(notdir $@).hacky
+	echo -e "all: $(realpath .)/$(notdir $@)\n" >> $(DEPTH)/.hacky/$(notdir $@).hacky
+	$(topsrcdir)/tools/hackymake/abspp.py < $(MDDEPDIR)/$(@F).pp >> $(DEPTH)/.hacky/$(notdir $@).hacky
 
 $(CPPOBJS): %.$(OBJ_SUFFIX): %.cpp $(call mkdir_deps,$(MDDEPDIR))
 	$(REPORT_BUILD)
 	@$(MAKE_DEPS_AUTO_CXX)
-	$(ELOG) $(CCC) $(OUTOPTION)$@ -c $(COMPILE_CXXFLAGS) $(TARGET_LOCAL_INCLUDES) $(_VPATH_SRCS)
+	$(ELOG) $(CCC) $(OUTOPTION)$@ -c $(COMPILE_CXXFLAGS) $(TARGET_LOCAL_INCLUDES) $(_VPATH_SRCS) 
+	echo -e "$(realpath .)/$(notdir $@): $(realpath $(_VPATH_SRCS)) $(realpath .)/Makefile" > $(DEPTH)/.hacky/$(notdir $@).hacky
+	echo -e "\tcd $(realpath .) && $(CCC) $(OUTOPTION)$@ -c $(subst ",\",$(COMPILE_CXXFLAGS)) $(subst ",\",$(TARGET_LOCAL_INCLUDES)) $(subst ",\",$(_VPATH_SRCS))\n" >> $(DEPTH)/.hacky/$(notdir $@).hacky
+	echo -e "all: $(realpath .)/$(notdir $@)\n" >> $(DEPTH)/.hacky/$(notdir $@).hacky
+	$(topsrcdir)/tools/hackymake/abspp.py < $(MDDEPDIR)/$(@F).pp >> $(DEPTH)/.hacky/$(notdir $@).hacky
 
 $(CMMOBJS): $(OBJ_PREFIX)%.$(OBJ_SUFFIX): %.mm $(call mkdir_deps,$(MDDEPDIR))
 	$(REPORT_BUILD)
 	@$(MAKE_DEPS_AUTO_CXX)
 	$(ELOG) $(CCC) -o $@ -c $(COMPILE_CXXFLAGS) $(COMPILE_CMMFLAGS) $(TARGET_LOCAL_INCLUDES) $(_VPATH_SRCS)
 
 $(CMOBJS): $(OBJ_PREFIX)%.$(OBJ_SUFFIX): %.m $(call mkdir_deps,$(MDDEPDIR))
 	$(REPORT_BUILD)
diff --git a/js/src/tools/hackymake/abspp.py b/js/src/tools/hackymake/abspp.py
new file mode 100755
index 0000000000000000000000000000000000000000..1df1c0e629de335050b540d57b8597e266cc5c9d
--- /dev/null
+++ b/js/src/tools/hackymake/abspp.py
@@ -0,0 +1,25 @@
+#!/usr/bin/env python
+
+import sys
+import re
+import os
+from tokenize import tokenize, untokenize, NUMBER, STRING, NAME, OP
+
+if __name__ == "__main__":
+  for line in sys.stdin.readlines():
+    if line.endswith(":\n"):
+      continue
+    tokens = re.split('([^ \t]+)', line)
+    for token in tokens:
+      if token.endswith == ":":
+          token = token[:-3]
+      #print "token: " + token + " in " + line
+      if token == "":
+        continue
+      if re.match('[\w\\.]\.*', token):
+        sys.stdout.write(os.path.realpath(token));
+      else:
+        sys.stdout.write(token)
+        #sys.stdout.write("'" + token + "'")
+
+
diff --git a/js/src/tools/hackymake/hacky.mk b/js/src/tools/hackymake/hacky.mk
new file mode 100644
index 0000000000000000000000000000000000000000..551cfeccef3ae80658057ed30155f71a58c1285f
--- /dev/null
+++ b/js/src/tools/hackymake/hacky.mk
@@ -0,0 +1,7 @@
+all:
+
+include .hacky/*.hacky
+
+clobber:
+	make -f Makefile
+	hash FAILSOHARD!
diff --git a/tools/hackymake/abspp.py b/tools/hackymake/abspp.py
new file mode 100755
index 0000000000000000000000000000000000000000..c7291bfd11c70c8e84781e66f6a69e65048ac766
--- /dev/null
+++ b/tools/hackymake/abspp.py
@@ -0,0 +1,33 @@
+#!/usr/bin/env python
+
+import sys
+import re
+import os
+from tokenize import tokenize, untokenize, NUMBER, STRING, NAME, OP
+
+if __name__ == "__main__":
+  for line in sys.stdin.readlines():
+    if line.endswith(":\n"):
+      continue
+    tokens = re.split('([^ \t]+)', line)
+    for token in tokens:
+      if token.endswith == ":":
+          token = token[:-1]
+      if token == "":
+        continue
+      if re.match('[\w\\.]\.*', token):
+        token = os.path.realpath(token)
+        # Some windows dependencies are poorly formed
+        # in the original .pp file
+        if not os.path.exists(token):
+          continue
+        token = token.replace("\\", "/")
+        sys.stdout.write(token);
+      else:
+        if token != " " and token != ":" and not os.path.exists(token):
+          continue
+        sys.stdout.write(token)
+        #sys.stdout.write("'" + token + "'")
+  print ""
+
+
diff --git a/tools/hackymake/hacky.mk b/tools/hackymake/hacky.mk
new file mode 100644
index 0000000000000000000000000000000000000000..551cfeccef3ae80658057ed30155f71a58c1285f
--- /dev/null
+++ b/tools/hackymake/hacky.mk
@@ -0,0 +1,7 @@
+all:
+
+include .hacky/*.hacky
+
+clobber:
+	make -f Makefile
+	hash FAILSOHARD!
